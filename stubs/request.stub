import { TThunk } from "@/modules/Base/interfaces/request-interface";
import {
  I{{moduleName}}DeleteResponse,
  I{{moduleName}}GetByKeyResponse,
  I{{plurarModuleName}}Response,
  I{{moduleName}}StoreResponse,
  I{{moduleName}}PasswordUpdateResponse,
  I{{moduleName}}StatusUpdateResponse,
  I{{moduleName}}TypeUpdateResponse,
  I{{plurarModuleName}}ExportResponse,
  I{{plurarModuleName}}ImportResponse,
  I{{plurarModuleName}}TrashedResponse,
  I{{moduleName}}RestoreResponse,
  I{{moduleName}}ForceDeleteResponse,
} from "../interfaces/request-interface";
import { ExportType } from "@/modules/Base/components/tables/TableExport";
import { ImportType } from "@/modules/Base/components/imports/ImportWrapper";

export const get{{plurarModuleName}}: TThunk<
  {
    page?: number;
    per_page?: number;
    status?: string;
    type?: string;
    first_name?: string;
    last_name?: string;
    mobile?: string;
    email?: string;
    created_from?: string;
    created_to?: string;
  },
  {},
  I{{plurarModuleName}}Response[],
  true
> = (api, data, extra) => {
  return api.get(
    "{{plurarSnakeModuleName}}",
    data
      ? {
          params: {
            page: data.page,
            per_page: data.per_page,
            status: data.status,
            type: data.type,
            first_name: data.first_name,
            last_name: data.last_name,
            mobile: data.mobile,
            email: data.email,
            created_from: data.created_from,
            created_to: data.created_to,
          },
        }
      : {}
  );
};

export const store{{moduleName}}: TThunk<
  {
    status: string;
    type: string;
    first_name: string;
    last_name: string;
    mobile: string;
    email: string;
  },
  {},
  I{{moduleName}}StoreResponse
> = async (api, data, extra) => {
  const formData = new FormData();
  formData.append("status", data.status);
  formData.append("type", data.type);
  formData.append("first_name", data.first_name);
  formData.append("last_name", data.last_name);
  formData.append("mobile", data.mobile);
  formData.append("email", data.email);

  return api.post("{{plurarSnakeModuleName}}", formData);
};

export const get{{moduleName}}ByKey: TThunk<
  {},
  {
    key: string;
  },
  I{{moduleName}}GetByKeyResponse
> = async (api, data, extra) => {
  return api.get(`{{plurarSnakeModuleName}}/${extra.key}`);
};

export const update{{moduleName}}: TThunk<
  {
    status: string;
    type: string;
    first_name: string;
    last_name: string;
    mobile: string;
    email: string;
  },
  {
    {{camelModuleName}}Id: string;
  },
  I{{moduleName}}StoreResponse
> = async (api, data, extra) => {
  const formData = new FormData();
  formData.append("_method", "PATCH");
  formData.append("status", data.status);
  formData.append("type", data.type);
  formData.append("first_name", data.first_name);
  formData.append("last_name", data.last_name);
  formData.append("mobile", data.mobile);
  formData.append("email", data.email);

  return api.post(`{{plurarSnakeModuleName}}/${extra.{{camelModuleName}}Id}`, formData);
};

export const delete{{moduleName}}: TThunk<
  {},
  {
    {{camelModuleName}}Id: string;
  },
  I{{moduleName}}DeleteResponse
> = (api, data, extra) => {
  return api.delete(`{{plurarSnakeModuleName}}/${extra.{{camelModuleName}}Id}`);
};

export const update{{moduleName}}Status: TThunk<
  {
    status: string;
  },
  { {{camelModuleName}}Id: string },
  I{{moduleName}}StatusUpdateResponse
> = (api, data, extra) => {
  const formData = new FormData();
  formData.append("_method", "PATCH");
  formData.append("status", data.status);

  return api.post(`{{plurarSnakeModuleName}}/${extra.{{camelModuleName}}Id}/status`, formData);
};

export const update{{moduleName}}Type: TThunk<
  {
    type: string;
  },
  { {{camelModuleName}}Id: string },
  I{{moduleName}}TypeUpdateResponse
> = (api, data, extra) => {
  const formData = new FormData();
  formData.append("_method", "PATCH");
  formData.append("type", data.type);

  return api.post(`{{plurarSnakeModuleName}}/${extra.{{camelModuleName}}Id}/type`, formData);
};

export const get{{plurarModuleName}}Trashed: TThunk<
  {
    page?: number;
    per_page?: number;
    status?: string;
    type?: string;
    first_name?: string;
    last_name?: string;
    mobile?: string;
    email?: string;
    created_from?: string;
    created_to?: string;
  },
  {},
  I{{plurarModuleName}}TrashedResponse[],
  true
> = (api, data, extra) => {
  return api.get(
    "{{plurarSnakeModuleName}}/trashed/list",
    data
      ? {
          params: {
            page: data.page,
            per_page: data.per_page,
            status: data.status,
            type: data.type,
            first_name: data.first_name,
            last_name: data.last_name,
            mobile: data.mobile,
            email: data.email,
            created_from: data.created_from,
            created_to: data.created_to,
          },
        }
      : {}
  );
};

export const restore{{moduleName}}: TThunk<
  {},
  {
    {{camelModuleName}}Id: string;
  },
  I{{moduleName}}RestoreResponse
> = (api, data, extra) => {
  return api.patch(`{{plurarSnakeModuleName}}/${extra.{{camelModuleName}}Id}/restore`);
};

export const forceDelete{{moduleName}}: TThunk<
  {},
  {
    {{camelModuleName}}Id: string;
  },
  I{{moduleName}}ForceDeleteResponse
> = (api, data, extra) => {
  return api.delete(`{{plurarSnakeModuleName}}/${extra.{{camelModuleName}}Id}/force`);
};

export const export{{plurarModuleName}}: TThunk<
  {
    page?: number;
    per_page?: number;
    status?: string;
    type?: string;
    first_name?: string;
    last_name?: string;
    mobile?: string;
    email?: string;
    created_from?: string;
    created_to?: string;
    trashed: boolean;
  },
  {
    type: ExportType;
  },
  I{{plurarModuleName}}ExportResponse
> = async (api, data, extra) => {
  const response = await api.get(`{{plurarSnakeModuleName}}/export/${extra.type}`, {
    responseType: "blob",
    params: {
      page: data.page,
      per_page: data.per_page,
      status: data.status,
      type: data.type,
      first_name: data.first_name,
      last_name: data.last_name,
      mobile: data.mobile,
      email: data.email,
      created_from: data.created_from,
      created_to: data.created_to,
      trashed: data.trashed,
    },
  });

  const blob = new Blob([response.data], {
    type: response.headers["content-type"],
  });

  let fileName = "{{plurarSnakeModuleName}}.xlsx";
  const fileNameFromServer = response.headers["content-disposition"];

  if (fileNameFromServer) {
    const matchFileName = fileNameFromServer.match(/filename="?([^";]+)"?/);

    if (matchFileName && matchFileName[1]) {
      fileName = matchFileName[1];
    }
  }

  const url = window.URL.createObjectURL(blob);
  const link = document.createElement("a");
  link.href = url;
  link.setAttribute("download", fileName);
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);

  return response;
};

export const import{{plurarModuleName}}: TThunk<
  {
    file: File;
  },
  {
    type: ImportType;
  },
  I{{plurarModuleName}}ImportResponse
> = (api, data, extra) => {
  const formData = new FormData();

  formData.append("file", data.file);
  return api.post(`{{plurarSnakeModuleName}}/import/${extra.type}`, formData);
};
