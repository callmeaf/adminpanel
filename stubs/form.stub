import Stepper from "@/modules/Base/components/common/Stepper";
import * as React from "react";
import {{moduleName}}InfoForm from "./{{moduleName}}InfoForm";
import { useTranslations } from "next-intl";
import useHttp from "@/modules/Base/hooks/use-http";
import {
  store{{moduleName}},
  update{{moduleName}},
} from "../requests/{{kebabModuleName}}-requests";
import useStepper from "@/modules/Base/hooks/use-stepper";
import { SET_SNACKBAR } from "@/modules/UI/context/action-types";
import to{{moduleName}}, { I{{moduleName}}Model } from "@/modules/{{moduleName}}/models/{{moduleName}}";
import moduleConfig from "../module.config";

interface I{{moduleName}}FormsProps {
  {{camelModuleName}}Model?: I{{moduleName}}Model;
}

const {{moduleName}}Forms: React.FC<I{{moduleName}}FormsProps> = ({ {{camelModuleName}}Model }) => {
  const t = useTranslations("{{moduleName}}.Widgets.Form");

  const [{{camelModuleName}}, set{{moduleName}}] = React.useState<I{{moduleName}}Model | undefined>({{camelModuleName}}Model);
  const {
    steps,
    activeStep,
    activeStepIndex,
    completed,
    handleNextStep,
    handleBackStep,
    handleResetStep,
    handleGoToRoute,
    handleGoStep,
  } = useStepper([
    {
      id: "{{snakeModuleName}}_info",
      label: t("{{snakeModuleName}}_info_label"),
    },
  ]);

  const { handle: handleStore{{moduleName}}, loading: loadingStore{{moduleName}} } = useHttp(
    moduleConfig,
    store{{moduleName}},
    {
      onSuccess: (res, { uiDispatch, tr }) => {
        uiDispatch({
          type: SET_SNACKBAR,
          payload: {
            type: "success",
            message: tr("store{{moduleName}}.success_message"),
          },
        });
        handleNextStep();
        set{{moduleName}}(to{{moduleName}}(res.data));
      },
    }
  );

  const { handle: handleUpdate{{moduleName}}, loading: loadingUpdate{{moduleName}} } = useHttp(
    moduleConfig,
    update{{moduleName}},
    {
      onSuccess: (res, { uiDispatch, tr }) => {
        uiDispatch({
          type: SET_SNACKBAR,
          payload: {
            type: "success",
            message: tr("update{{moduleName}}.success_message"),
          },
        });
        handleNextStep();
        set{{moduleName}}(to{{moduleName}}(res.data));
      },
    }
  );

  const store{{moduleName}}Handler = (data: any) => handleStore{{moduleName}}(data);
  const update{{moduleName}}Handler = (data: any) =>
    handleUpdate{{moduleName}}(data, { {{camelModuleName}}Id: {{camelModuleName}}?.id! });

 const resetStepHandler = () => {
    if ({{camelModuleName}}Model) {
      handleGoToRoute("{{plurarSnakeModuleName}}_create");
    } else {
      handleResetStep();
      set{{moduleName}}(undefined);
    }
  };

  const goToListRouteHandler = () => {
    handleGoToRoute("{{plurarSnakeModuleName}}_index");
  };

  const goToEditRouteHandler = () => {
    if ({{camelModuleName}}Model) {
      handleResetStep();
    } else if ({{camelModuleName}}) {
      handleGoToRoute("{{plurarSnakeModuleName}}_edit", {
        {{camelModuleName}}Id: {{camelModuleName}}.id,
      });
    }
  };

  return (
    <Stepper
      steps={steps}
      activeStep={activeStep}
      activeStepIndex={activeStepIndex}
      completed={completed}
      handleNextStep={handleNextStep}
      handleBackStep={handleBackStep}
      handleResetStep={resetStepHandler}
      handleGoToList={goToListRouteHandler}
      handleGoToEdit={goToEditRouteHandler}
      handleGoStep={handleGoStep}
      clickableStep={!!{{camelModuleName}}}
    >
      <{{moduleName}}InfoForm
        loading={{{camelModuleName}} ? loadingUpdate{{moduleName}} : loadingStore{{moduleName}}}
        onSubmit={{{camelModuleName}} ? update{{moduleName}}Handler : store{{moduleName}}Handler}
        {{camelModuleName}}={{{camelModuleName}}}
      />
    </Stepper>
  );
};

export default {{moduleName}}Forms;
